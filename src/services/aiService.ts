import { GoogleGenerativeAI } from '@google/generative-ai';

// Verificar se a API key est√° dispon√≠vel
const apiKey = process.env.REACT_APP_GEMINI_API_KEY;
console.log('API Key dispon√≠vel:', !!apiKey);
console.log('API Key length:', apiKey ? apiKey.length : 0);

if (!apiKey) {
  console.error('‚ùå API Key n√£o encontrada! Verifique o arquivo .env');
}

const genAI = new GoogleGenerativeAI(apiKey || '');

export interface AITaskRequest {
  userInput: string;
  currentDate: Date;
}

export interface AITaskResponse {
  tasks: Array<{
    title: string;
    description: string;
    priority: 'low' | 'medium' | 'high';
    status: 'backlog' | 'to-do' | 'in-progress' | 'done';
    taskType: 'geral' | 'recorrente' | 'compromisso';
    dueDate?: string;
    startDate?: string;
    recurringDays?: string[];
    recurringTime?: string;
    appointmentTime?: string;
    blockType: string;
  }>;
  suggestedBlock?: string;
}

export const createTasksFromAI = async (request: AITaskRequest): Promise<AITaskResponse> => {
  try {
    // Verificar se a API key est√° configurada
    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;
    console.log('üîë Verificando API Key...');
    console.log('API Key presente:', !!apiKey);
    console.log('API Key length:', apiKey ? apiKey.length : 0);
    
    if (!apiKey) {
      console.error('‚ùå API Key n√£o configurada!');
      console.error('Verifique se o arquivo .env existe e cont√©m: REACT_APP_GEMINI_API_KEY=sua_chave_aqui');
      throw new Error('API key n√£o configurada. Verifique o arquivo .env');
    }

    console.log('‚úÖ API Key configurada, iniciando chamada para Gemini API...');
    
    // Teste simples primeiro
    if (request.userInput.includes('teste')) {
      console.log('Executando teste simples...');
      return {
        tasks: [{
          title: 'Tarefa de Teste',
          description: 'Esta √© uma tarefa de teste criada pela IA',
          priority: 'medium',
          status: 'to-do',
          taskType: 'geral',
          blockType: 'teste'
        }],
        suggestedBlock: 'teste'
      };
    }
    
    const prompt = 
`
Voc√™ √© um assistente de produtividade especializado em criar tarefas organizadas chamado tide.
Analise a entrada do usu√°rio e crie tarefas apropriadas.

Data atual: ${request.currentDate.toLocaleDateString('pt-BR')}

Entrada do usu√°rio: "${request.userInput}"

se o usuario pedir "tide" vc deve interpretar o que foi pedido e realizar a a√ß√£o.
Se o usuario citar uma task parecida com uma existente, pergunte se ele ta se referindo a ela ou a uma nova? y/n

kanban: 
O padr√£o vai ser pra colocar em backlog
Se eu pedir com verbos no infinitivo, coloca em to do.
Se tiver no gerundio = in progress
Terminei = done

entao se eu falar terminei "alguma task" tem que marcar ela como done, ou caso ela nao exista ainda colocar ela como done direto

o padrao das prioridades √© ser low, so muda se eu pedir.
tipos:
   - Tarefa √∫nica ‚Üí "geral"
   - Compromisso com data/hora ‚Üí "compromisso"
   - Tarefa que se repete ‚Üí "recorrente"

  tasks recorrentes: a task tem dia de inicio e de fim, nesse caso o fim pode ser indefinido, mas caso informado, a recorrencia deve ser somente durante aquele periodo, e a tarefa aparece no gantt.

**Datas e prazos:**
   - "at√© sexta" ‚Üí dueDate calculado
   - "dia 05/09 14h" ‚Üí startDate e appointmentTime (compromisso √∫nico)
   - "amanh√£ 15h" ‚Üí startDate e appointmentTime (compromisso √∫nico)
   - "toda ter√ßa 12h" ‚Üí recurringDays e recurringTime (recorrente)
   - "consulta m√©dica dia 15 √†s 10h" ‚Üí startDate e appointmentTime (compromisso √∫nico)

**Prioridades:**
   - "urgente" ‚Üí "high"
   - "importante" ‚Üí "medium"
   - Padr√£o ‚Üí "low"

**Blocos/Projetos:**
   - S√≥ sugira um bloco se o usu√°rio explicitamente pedir um novo
   - Se n√£o especificar, deixe suggestedBlock vazio (as tarefas v√£o para "Compromissos")
   - Use blocos existentes quando poss√≠vel
   - **COMANDO ESPECIAL "schedule"**: Se o usu√°rio come√ßar com "schedule", crie um bloco com o nome da mat√©ria/disciplina e adicione a tarefa APENAS no schedule (n√£o no kanban)

Responda apenas com JSON v√°lido no formato:
{
  "tasks": [
    {
      "title": "string",
      "description": "string",
      "priority": "low|medium|high",
      "status": "backlog|to-do|in-progress|done",
      "taskType": "geral|recorrente|compromisso",
      "dueDate": "YYYY-MM-DD",
      "startDate": "YYYY-MM-DD",
      "recurringDays": ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"],
      "recurringTime": "HH:MM",
      "appointmentTime": "HH:MM",
      "blockType": "string"
    }
  ],
  "suggestedBlock": "string"
}
  o default de uma description √© nao ter nada, so se for informada.
  obs: a task pode ser recorrente mas ter data de inicio e fim, isso deve ser perguntado para que seja feita da melhor forma. se tiver data prevista pra fim, colocar no gantt, se nao, nao colocar.
  ex: task: avaliar a escola toda quarta as 14h desde 13/08 ate 17/09
  significa que do dia 13 ao 17 todas as quartas as 14h vai ter a task x

Exemplos de entrada:
- "preciso fazer relat√≥rio at√© sexta" ‚Üí tarefa geral com prazo, status to-do (vai para "Compromissos")
- "estou fazendo an√°lise de dados" ‚Üí tarefa em progresso (vai para "Compromissos")
- "terminei revis√£o do c√≥digo" ‚Üí tarefa conclu√≠da (vai para "Compromissos")
- "consulta dentista amanh√£ 15h" ‚Üí compromisso com data/hora (vai para "Compromissos")
- "gastroenterologista dia 05/09 14:20" ‚Üí compromisso com data/hora (vai para "Compromissos")
- "exerc√≠cios toda ter√ßa 12h" ‚Üí tarefa recorrente (vai APENAS para agenda, N√ÉO para kanban nem gantt)
- "backlog estudar React" ‚Üí tarefa no backlog (vai para "Compromissos")
- "criar projeto 'Marketing Digital'" ‚Üí tarefa + bloco novo "Marketing Digital"
- "no projeto 'Trabalho' preciso fazer relat√≥rio" ‚Üí tarefa no bloco existente "Trabalho"

**EXEMPLOS COM COMANDO "schedule":**
- "schedule redes de computadores toda segunda 8 √†s 12" ‚Üí bloco "Redes de Computadores" + tarefa recorrente APENAS no schedule
- "schedule matem√°tica toda ter√ßa 14h" ‚Üí bloco "Matem√°tica" + tarefa recorrente APENAS no schedule
- "schedule f√≠sica toda quarta 10 √†s 12" ‚Üí bloco "F√≠sica" + tarefa recorrente APENAS no schedule

**IMPORTANTE:**
- Compromissos √∫nicos com data/hora espec√≠fica = "compromisso" (N√ÉO recorrente)
- Tarefas que se repetem = "recorrente" (com recurringDays)
- Use "compromisso" para consultas m√©dicas, reuni√µes, eventos √∫nicos
- Use "recorrente" apenas quando houver palavras como "toda", "todos os", "semanalmente"

**REGRAS DE CLASSIFICA√á√ÉO:**
- "gastroenterologista dia 05/09 14:20" ‚Üí taskType: "compromisso" (N√ÉO recorrente)
- "consulta m√©dica amanh√£ 15h" ‚Üí taskType: "compromisso" (N√ÉO recorrente)
- "reuni√£o dia 20 √†s 10h" ‚Üí taskType: "compromisso" (N√ÉO recorrente)
- "exerc√≠cios toda ter√ßa 12h" ‚Üí taskType: "recorrente" (com recurringDays)
- "aula de piano toda quarta 16h" ‚Üí taskType: "recorrente" (com recurringDays)

**COMPROMISSOS √öNICOS SEMPRE = "compromisso"**
**RECORR√äNCIAS SEMPRE = "recorrente"**

**INSTRU√á√ïES PARA COMANDO "schedule":**
- Se o usu√°rio come√ßar com "schedule", extraia o nome da mat√©ria/disciplina
- Crie um bloco com o nome da mat√©ria (capitalize a primeira letra de cada palavra)
- A tarefa deve ser sempre "recorrente" (taskType: "recorrente")
- A tarefa deve ir APENAS para o schedule (n√£o para kanban nem gantt)
- Use o nome da mat√©ria como t√≠tulo da tarefa
- Exemplo: "schedule redes de computadores toda segunda 8 √†s 12" ‚Üí bloco: "Redes De Computadores", tarefa: "Redes de computadores"
`;


    console.log('Prompt criado, chamando Gemini API...');
    
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    
    console.log('Modelo carregado, gerando conte√∫do...');
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    console.log('Resposta recebida:', text);
    
    if (!text) throw new Error('Resposta vazia da IA');

    // Limpar a resposta para extrair apenas o JSON
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.error('Formato de resposta inv√°lido. Texto recebido:', text);
      throw new Error('Formato de resposta inv√°lido da IA');
    }
    
    const parsedResponse = JSON.parse(jsonMatch[0]);
    console.log('Resposta parseada:', parsedResponse);
    
    return parsedResponse;
  } catch (error) {
    console.error('Erro detalhado ao criar tarefas com IA:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        throw new Error('Erro de configura√ß√£o da API: ' + error.message);
      } else if (error.message.includes('network') || error.message.includes('fetch')) {
        throw new Error('Erro de conex√£o: ' + error.message);
      } else if (error.message.includes('rate limit') || error.message.includes('quota')) {
        throw new Error('Limite de requisi√ß√µes excedido: ' + error.message);
      } else if (error.message.includes('JSON')) {
        throw new Error('Erro ao processar resposta da IA: ' + error.message);
      }
    }
    
    throw new Error('Erro inesperado: ' + (error instanceof Error ? error.message : String(error)));
  }
};
